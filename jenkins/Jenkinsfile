pipeline {
    agent any

    environment {
        BACKEND_IMAGE = 'chandler032/newsapp:latest'
        UI_IMAGE = 'chandler032/newsapp-ui:latest'
        KUBERNETES_NAMESPACE = 'default'  // Set the correct namespace if deploying to Kubernetes
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/chandler032/newsgroupapp.git && cd newsSourceApp'
            }
        }

        stage('Build & Test Backend') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', '8115a0d0f7374bb3aabb4bfa03defa3e') {
                        sh """
                            echo "Building and pushing backend..."
                            docker build -t $BACKEND_IMAGE ./backend
                            docker push $BACKEND_IMAGE

                            echo "Building and pushing UI..."
                            docker build -t $UI_IMAGE ./ui
                            docker push $UI_IMAGE
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { return fileExists('k8s-deployment.yaml') }  // Only deploy if k8s manifests exist
            }
            steps {
                script {
                    sh "kubectl config use-context my-k8s-context"  // Set the correct K8s context
                    sh "kubectl apply -f k8s-deployment.yaml -n $KUBERNETES_NAMESPACE"
                }
            }
        }

        stage('Run Locally via Docker Compose') {
            steps {
                script {
                    sh """
                        echo "Starting services using Docker Compose..."
                        docker-compose down || true  # Stop existing containers if running
                        docker-compose up -d
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment Successful!'
        }
        failure {
            echo '‚ùå Build Failed!'
        }
        always {
            echo 'üì¢ Build Process Completed!'
        }
    }
}
